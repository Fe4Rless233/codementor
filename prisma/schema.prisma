// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  firstName    String?
  lastName     String?
  avatar       String?
  bio          String?
  level        String   @default("Beginner")
  totalScore   Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  codeSubmissions CodeSubmission[]
  skillProgress   SkillProgress[]
  collaborations  Collaboration[]
  chatMessages    ChatMessage[]
  
  @@map("users")
}

model CodeSubmission {
  id          String   @id @default(cuid())
  userId      String
  title       String
  code        String
  language    String
  complexity  Int      @default(0)
  quality     Int      @default(0)
  maintainability Int  @default(0)
  performance Int      @default(0)
  feedback    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("code_submissions")
}

model SkillProgress {
  id        String   @id @default(cuid())
  userId    String
  skillName String
  level     Int      @default(0)
  xp        Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, skillName])
  @@map("skill_progress")
}

model Collaboration {
  id          String   @id @default(cuid())
  title       String
  description String?
  code        String
  language    String
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  creator     User         @relation(fields: [createdBy], references: [id])
  messages    ChatMessage[]
  
  @@map("collaborations")
}

model ChatMessage {
  id              String        @id @default(cuid())
  collaborationId String
  userId          String
  message         String
  type            String        @default("text") // text, code, system
  createdAt       DateTime      @default(now())
  
  collaboration   Collaboration @relation(fields: [collaborationId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id])
  
  @@map("chat_messages")
}
